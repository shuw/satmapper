/*
 * PanelTracking.java
 *
 * Created on July 30, 2001, 4:14 PM
 */

package ca.gc.space.quicksat.ground.tracking;
import java.util.*;
import java.util.Calendar;
import java.lang.Math.*;

import ca.gc.space.quicksat.ground.satellite.*;
import ca.gc.space.quicksat.ground.client.*;
import ca.gc.space.quicksat.ground.control.*;
import ca.gc.space.quicksat.ground.satellite.Satellite;

/**
 *
 * @author  jfcusson
 */
public class PanelTracking extends javax.swing.JPanel {
    
/*-----------------------------------------------------------------*/
/* If this is true, then next time we update the current satellite */
/* position we'll also do a one week pass prediction...            */
/*-----------------------------------------------------------------*/
boolean weekPassPredictionRequested = false;

GroundStation groundStation = null;
    
    /** Creates new form PanelTracking */
    public PanelTracking() {
        initComponents();
    }
    
    /*========================================================================*/
    /** Change the color of indicators to tell the user that it is the Doppler
     *  compensation at 435MHz which is enabled or not.
     *  @param isUsingIt true to indicate Doppler compensation at 435 is used.*/
    /*========================================================================*/
    public void setUsingDopplerCompensationAt435( boolean isUsingIt ) {
    /*========================================================================*/    
        if( isUsingIt ) {
            txtDoppler435.setBackground( java.awt.Color.green );
            txtDoppler146.setBackground( java.awt.Color.lightGray );
        } else {
            txtDoppler435.setBackground( java.awt.Color.lightGray );
        }
    }
    
    /*========================================================================*/
    /** Change the color of indicators to tell the user that it is the Doppler
     *  compensation at 146MHz which is enabled or not.
     *  @param isUsingIt true to indicate Doppler compensation at 146 is used.*/
    /*========================================================================*/
    public void setUsingDopplerCompensationAt146( boolean isUsingIt ) {
    /*========================================================================*/    
        if( isUsingIt ) {
            txtDoppler146.setBackground( java.awt.Color.green );
            txtDoppler435.setBackground( java.awt.Color.lightGray );
        } else {
            txtDoppler146.setBackground( java.awt.Color.lightGray );
        }
    }
    

/** This method is called from within the constructor to
 * initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is
 * always regenerated by the Form Editor.
 */
private void initComponents() { //GEN-BEGIN:initComponents
    jScrollPane1 = new javax.swing.JScrollPane();
    jPanel1 = new javax.swing.JPanel();
    jPanel16 = new javax.swing.JPanel();
    jPanel3 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    txtSatName = new javax.swing.JTextField();
    jPanel19 = new javax.swing.JPanel();
    jLabel19 = new javax.swing.JLabel();
    txtGroundRefLat = new javax.swing.JTextField();
    jLabel20 = new javax.swing.JLabel();
    txtGroundRefLong = new javax.swing.JTextField();
    jPanel8 = new javax.swing.JPanel();
    jLabel10 = new javax.swing.JLabel();
    txtUTCOffset = new javax.swing.JTextField();
    jPanel7 = new javax.swing.JPanel();
    jPanel12 = new javax.swing.JPanel();
    jLabel3 = new javax.swing.JLabel();
    txtRangeKm = new javax.swing.JTextField();
    jLabel4 = new javax.swing.JLabel();
    txtAzimuth = new javax.swing.JTextField();
    jLabel5 = new javax.swing.JLabel();
    txtElevation = new javax.swing.JTextField();
    jLabel11 = new javax.swing.JLabel();
    txtLatitude = new javax.swing.JTextField();
    jLabel12 = new javax.swing.JLabel();
    txtLongitude = new javax.swing.JTextField();
    jLabel2 = new javax.swing.JLabel();
    txtAltitudeKm = new javax.swing.JTextField();
    jLabel7 = new javax.swing.JLabel();
    txtVelocityKmH = new javax.swing.JTextField();
    jLabel6 = new javax.swing.JLabel();
    txtFootprintKm = new javax.swing.JTextField();
    jLabel8 = new javax.swing.JLabel();
    txtApogee = new javax.swing.JTextField();
    jLabel9 = new javax.swing.JLabel();
    txtPerigee = new javax.swing.JTextField();
    jPanel5 = new javax.swing.JPanel();
    jPanel6 = new javax.swing.JPanel();
    jPanel15 = new javax.swing.JPanel();
    chkEnableAntennaRotator = new javax.swing.JCheckBox();
    txtAntennaRotatorFeedback = new javax.swing.JTextField();
    jPanel9 = new javax.swing.JPanel();
    jPanel17 = new javax.swing.JPanel();
    jLabel15 = new javax.swing.JLabel();
    txtDoppler146 = new javax.swing.JTextField();
    jPanel10 = new javax.swing.JPanel();
    jLabel16 = new javax.swing.JLabel();
    txtDoppler435 = new javax.swing.JTextField();
    jPanel11 = new javax.swing.JPanel();
    chkDopplerCompensation = new javax.swing.JCheckBox();
    jPanel14 = new javax.swing.JPanel();
    jLabel17 = new javax.swing.JLabel();
    slidDopplerTrim = new javax.swing.JSlider();
    jLabel18 = new javax.swing.JLabel();
    jPanel13 = new javax.swing.JPanel();
    jPanel4 = new javax.swing.JPanel();
    lblApproaching = new javax.swing.JLabel();
    lblSignalAcquisition = new javax.swing.JLabel();
    jLabel13 = new javax.swing.JLabel();
    txtAOS = new javax.swing.JTextField();
    jLabel14 = new javax.swing.JLabel();
    txtLOS = new javax.swing.JTextField();
    jPanel2 = new javax.swing.JPanel();
    btnPassPredict = new javax.swing.JButton();
    jScrollPane2 = new javax.swing.JScrollPane();
    txtPassPredict = new javax.swing.JTextArea();

    setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));

    jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

    jPanel1.setPreferredSize(new java.awt.Dimension(600, 43));
    jPanel16.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
    jLabel1.setText("Sat:");
    jPanel3.add(jLabel1);

    txtSatName.setPreferredSize(new java.awt.Dimension(200, 21));
    jPanel3.add(txtSatName);

    jPanel19.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
    jLabel19.setText("Ground - Lat:");
    jPanel19.add(jLabel19);

    txtGroundRefLat.setText("Not Set");
    txtGroundRefLat.setPreferredSize(new java.awt.Dimension(70, 21));
    jPanel19.add(txtGroundRefLat);

    jLabel20.setText("Long:");
    jPanel19.add(jLabel20);

    txtGroundRefLong.setText("Not Set");
    txtGroundRefLong.setPreferredSize(new java.awt.Dimension(70, 21));
    jPanel19.add(txtGroundRefLong);

    jPanel3.add(jPanel19);

    jPanel8.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
    jPanel8.setToolTipText("Set using local computer time");
    jLabel10.setText("GMT offset (Local-GMT):");
    jPanel8.add(jLabel10);

    txtUTCOffset.setText("0");
    txtUTCOffset.setPreferredSize(new java.awt.Dimension(50, 21));
    jPanel8.add(txtUTCOffset);

    jPanel3.add(jPanel8);

    jPanel16.add(jPanel3);

    jPanel1.add(jPanel16);

    jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.X_AXIS));

    jPanel12.setLayout(new java.awt.GridLayout(10, 2, 1, 0));

    jPanel12.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
    jPanel12.setPreferredSize(new java.awt.Dimension(225, 200));
    jPanel12.setMinimumSize(new java.awt.Dimension(100, 200));
    jLabel3.setText(" Range (Km):");
    jPanel12.add(jLabel3);

    txtRangeKm.setPreferredSize(new java.awt.Dimension(100, 21));
    jPanel12.add(txtRangeKm);

    jLabel4.setText(" Azimuth:");
    jLabel4.setForeground(java.awt.Color.darkGray);
    jPanel12.add(jLabel4);

    txtAzimuth.setBackground(java.awt.Color.cyan);
    txtAzimuth.setPreferredSize(new java.awt.Dimension(100, 21));
    jPanel12.add(txtAzimuth);

    jLabel5.setText(" Elevation:");
    jLabel5.setForeground(java.awt.Color.darkGray);
    jPanel12.add(jLabel5);

    txtElevation.setBackground(java.awt.Color.cyan);
    txtElevation.setPreferredSize(new java.awt.Dimension(100, 21));
    jPanel12.add(txtElevation);

    jLabel11.setText(" Latitude:");
    jPanel12.add(jLabel11);

    txtLatitude.setPreferredSize(new java.awt.Dimension(100, 21));
    jPanel12.add(txtLatitude);

    jLabel12.setText(" Longitude:");
    jPanel12.add(jLabel12);

    txtLongitude.setPreferredSize(new java.awt.Dimension(100, 21));
    jPanel12.add(txtLongitude);

    jLabel2.setText(" Altitude (Km):");
    jPanel12.add(jLabel2);

    txtAltitudeKm.setPreferredSize(new java.awt.Dimension(100, 21));
    jPanel12.add(txtAltitudeKm);

    jLabel7.setText(" Velocity (Km/h):");
    jPanel12.add(jLabel7);

    txtVelocityKmH.setPreferredSize(new java.awt.Dimension(100, 21));
    jPanel12.add(txtVelocityKmH);

    jLabel6.setText(" Footprint (Km):");
    jPanel12.add(jLabel6);

    txtFootprintKm.setPreferredSize(new java.awt.Dimension(100, 21));
    jPanel12.add(txtFootprintKm);

    jLabel8.setText(" Apogee:");
    jPanel12.add(jLabel8);

    txtApogee.setPreferredSize(new java.awt.Dimension(100, 21));
    jPanel12.add(txtApogee);

    jLabel9.setText(" Perigee:");
    jPanel12.add(jLabel9);

    txtPerigee.setPreferredSize(new java.awt.Dimension(100, 21));
    jPanel12.add(txtPerigee);

    jPanel7.add(jPanel12);

    jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.Y_AXIS));

    jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.Y_AXIS));

    jPanel6.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
    jPanel15.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
    chkEnableAntennaRotator.setText("Enable Antenna Rotator");
    jPanel15.add(chkEnableAntennaRotator);

    txtAntennaRotatorFeedback.setPreferredSize(new java.awt.Dimension(100, 21));
    jPanel15.add(txtAntennaRotatorFeedback);

    jPanel6.add(jPanel15);

    jPanel5.add(jPanel6);

    jPanel9.setLayout(new javax.swing.BoxLayout(jPanel9, javax.swing.BoxLayout.Y_AXIS));

    jPanel9.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
    jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 1, 1));

    jLabel15.setText("Doppler at 146MHz:");
    jPanel17.add(jLabel15);

    txtDoppler146.setPreferredSize(new java.awt.Dimension(100, 21));
    jPanel17.add(txtDoppler146);

    jPanel9.add(jPanel17);

    jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 1, 1));

    jLabel16.setText("Doppler at 435MHz:");
    jPanel10.add(jLabel16);

    txtDoppler435.setPreferredSize(new java.awt.Dimension(100, 21));
    jPanel10.add(txtDoppler435);

    jPanel9.add(jPanel10);

    jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 1, 1));

    chkDopplerCompensation.setText("Enable Auto. Compensation");
    jPanel11.add(chkDopplerCompensation);

    jPanel9.add(jPanel11);

    jLabel17.setText("+4KHz");
    jPanel14.add(jLabel17);

    slidDopplerTrim.setPaintTicks(true);
    slidDopplerTrim.setMinimum(-4000);
    slidDopplerTrim.setMajorTickSpacing(1000);
    slidDopplerTrim.setMaximum(4000);
    slidDopplerTrim.setValue(0);
    jPanel14.add(slidDopplerTrim);

    jLabel18.setText("-4KHz");
    jPanel14.add(jLabel18);

    jPanel9.add(jPanel14);

    jPanel5.add(jPanel9);

    jPanel7.add(jPanel5);

    jPanel13.setLayout(new javax.swing.BoxLayout(jPanel13, javax.swing.BoxLayout.Y_AXIS));

    jPanel13.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
    jPanel13.setMinimumSize(new java.awt.Dimension(200, 224));
    jPanel4.setLayout(new java.awt.GridLayout(3, 2));

    jPanel4.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
    jPanel4.setMinimumSize(new java.awt.Dimension(200, 212));
    lblApproaching.setText("APPROACHING");
    lblApproaching.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblApproaching.setPreferredSize(new java.awt.Dimension(70, 27));
    lblApproaching.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black, 5));
    lblApproaching.setMinimumSize(new java.awt.Dimension(50, 27));
    lblApproaching.setOpaque(true);
    jPanel4.add(lblApproaching);

    lblSignalAcquisition.setText("ACQUISITION");
    lblSignalAcquisition.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lblSignalAcquisition.setPreferredSize(new java.awt.Dimension(70, 27));
    lblSignalAcquisition.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black, 5));
    lblSignalAcquisition.setMinimumSize(new java.awt.Dimension(50, 27));
    lblSignalAcquisition.setOpaque(true);
    jPanel4.add(lblSignalAcquisition);

    jLabel13.setText("AOS (minutes):");
    jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel13.setPreferredSize(new java.awt.Dimension(70, 17));
    jLabel13.setMinimumSize(new java.awt.Dimension(50, 17));
    jPanel4.add(jLabel13);

    txtAOS.setPreferredSize(new java.awt.Dimension(70, 21));
    jPanel4.add(txtAOS);

    jLabel14.setText("LOS (minutes):");
    jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel14.setPreferredSize(new java.awt.Dimension(70, 17));
    jLabel14.setMinimumSize(new java.awt.Dimension(50, 17));
    jPanel4.add(jLabel14);

    txtLOS.setPreferredSize(new java.awt.Dimension(70, 21));
    jPanel4.add(txtLOS);

    jPanel13.add(jPanel4);

    jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

    jPanel2.setBorder(new javax.swing.border.TitledBorder("Pass Prediction"));
    jPanel2.setPreferredSize(new java.awt.Dimension(150, 77));
    btnPassPredict.setText("Predict 1 week AOS");
    btnPassPredict.setEnabled(false);
    btnPassPredict.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnPassPredictActionPerformed(evt);
        }
    });

    jPanel2.add(btnPassPredict);

    jScrollPane2.setPreferredSize(new java.awt.Dimension(100, 25));
    jScrollPane2.setViewportView(txtPassPredict);

    jPanel2.add(jScrollPane2);

    jPanel13.add(jPanel2);

    jPanel7.add(jPanel13);

    jPanel1.add(jPanel7);

    jScrollPane1.setViewportView(jPanel1);

    add(jScrollPane1);

} //GEN-END:initComponents

    private void btnPassPredictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPassPredictActionPerformed
        weekPassPredictionRequested = true;
    }//GEN-LAST:event_btnPassPredictActionPerformed
    
/*------------------------------------------------------------------------*/
/** Updates the satellites tracking data (position, range...), using the 
 *  current data stored in the given sat (the position must ALREADY have
 *  been calculated previously). Note that if weekPassPredictionRequested 
 *  is true, we'll also do a one week
 *  prediction of passes and print the result in the txtPassPredict text
 *  area.
 * @param sat Satellite we want the tracking data for.                    */
/*------------------------------------------------------------------------*/
public void updateSat(Satellite sat) {
    /*------------------------------------------------------------------------*/

    if (sat == null)
        return;

    /*---------*/
    /* General */
    /*---------*/
    txtSatName.setText(sat.getFullName());

    /*----------------------------*/
    /* Position vs ground station */
    /*----------------------------*/
    txtRangeKm.setText("" + sat.getRangeKm());
    txtAzimuth.setText("" + sat.getAzimuth());
    txtElevation.setText("" + sat.getElevation());

    /*-----------------------------*/
    /* UTC offset (computer setup) */
    /*-----------------------------*/
    Calendar cal = new GregorianCalendar();
    int UTCOffset = ((cal.get(Calendar.ZONE_OFFSET) + cal.get(Calendar.DST_OFFSET)) / 1000 / 60 / 60);
    txtUTCOffset.setText("" + UTCOffset);
    cal = null;

    /*---------------------------------------------*/
    /* Flags (if the satellite is approaching, and */
    /* if signal acquired)                         */
    /*---------------------------------------------*/
    if (sat.isApproaching())
        lblApproaching.setBackground(java.awt.Color.green);
    else
        lblApproaching.setBackground(java.awt.Color.gray);
    if (sat.isVisible())
        lblSignalAcquisition.setBackground(java.awt.Color.green);
    else
        lblSignalAcquisition.setBackground(java.awt.Color.gray);

    /*----------------*/
    /* Doppler effect */
    /*----------------*/
    txtDoppler146.setText("" + sat.getDopplerCompensationAt146());
    txtDoppler435.setText("" + sat.getDopplerCompensationAt435());

    /*---------------------*/
    /* AOS/LOS Predictions */
    /*---------------------*/
    txtAOS.setText(doubleToString(sat.getNextAOSMinutes(), 5));
    //System.out.println("PanelTrack: aos= " + sat.getNextAOSMinutes());
    txtLOS.setText(doubleToString(sat.getNextLOSMinutes(), 5));

    /*--------------------*/
    /* Satellite position */
    /*--------------------*/
    txtLatitude.setText("" + sat.getLatitude());
    txtLongitude.setText("" + sat.getLongitude());
    txtAltitudeKm.setText("" + sat.getAltitudeKm());
    txtVelocityKmH.setText("" + sat.getVelocityKmH());
    txtFootprintKm.setText("" + sat.getFootprintKm());
    txtApogee.setText("" + sat.getApogeeKm());
    txtPerigee.setText("" + sat.getPerigeeKm());

    /*-------------*/
    /* Calculation */
    /*-------------*/
    //txts3.setText( doubleToString( sat.s3, 7 ) );
    //txtc3.setText( doubleToString( sat.c3, 7 ) );
    //txtr3.setText( doubleToString( sat.r3, 7 ) );
    //txtm1.setText( doubleToString( sat.m1, 7 ) );
    //txtm5.setText( doubleToString( sat.m5, 7 ) );
    //txte.setText( doubleToString( sat.e, 7 ) );

    /*-----------------*/
    /* Pass prediction */
    /*-----------------*/
    WEEK_PASS_PREDICTION : if (weekPassPredictionRequested) {
        if (groundStation == null) {
            System.out.println("Cannot predict passes: ground station not defined");
            break WEEK_PASS_PREDICTION;
        }
        Satellite tmpSat = new Satellite();
        tmpSat.copyFrom(sat);
        txtPassPredict.setText("Pass predict for " + tmpSat.getFullName() + "\n");
        txtPassPredict.append("--------------------------------\n");
        long startTime = new Date().getTime(); //in mSec.
        long endTime = startTime + 604800000; //start + 1 week in mSec.
        while (startTime < endTime) {
            tmpSat.calculatePosition(groundStation, startTime);
            long absAOS = startTime + tmpSat.getAOS();
            long absLOS = startTime + tmpSat.getLOS();
            GregorianCalendar calAOS = new GregorianCalendar();
            calAOS.setTime(new Date(absAOS));
            GregorianCalendar calLOS = new GregorianCalendar();
            calLOS.setTime(new Date(absLOS));
            txtPassPredict.append("AOS:" + calAOS + " LOS:" + calLOS + "\n");
            startTime += tmpSat.getLOS();
        }
        weekPassPredictionRequested = false;
    }
}    
    
    //public void setGroundRefLatitude( Double latitude ) {
    //    txtGroundRefLat.setText( ""+latitude );
    //}
    public double getGroundRefLatitude( ) {
        return( Double.parseDouble( txtGroundRefLat.getText() ) );        
    }
    public double getGroundRefLongitude( ) {
        return( Double.parseDouble( txtGroundRefLong.getText() ) );        
    }
    //public void setGroundRefLongitude( Double longitude ) {
    //    txtGroundRefLong.setText( ""+longitude );
    //}
    public void setGroundRefCoordinates( GroundStation gs ) {
        this.groundStation = gs;
        txtGroundRefLat.setText( ""+gs.getLatitude() );
        txtGroundRefLong.setText( ""+gs.getLongitude() );
    }
    
    public boolean isAntennaRotatorEnabled() {
        return( chkEnableAntennaRotator.isSelected() );
    }
    
    public void setAntennaRotatorFeedbackText( String text ) {
        txtAntennaRotatorFeedback.setText( text );
    }

    public boolean isDopplerCompensationEnabled() {
        return( chkDopplerCompensation.isSelected() );
    }
    
    public int getDopplerTrim() {
        /*------------------------------------------------------------*/
        /* Do not forget to revert the sign, since the "natural" way  */
        /* of seeing things with a radio is increase freq to the left */
        /* and the slider is working the other way...                 */
        /*------------------------------------------------------------*/
        return( -slidDopplerTrim.getValue() );
    }
    
    public int getUTCOffset() {
        int offset = 0;
        try{
            offset = Integer.parseInt(txtUTCOffset.getText());
        } catch( NumberFormatException nfe ) {
            System.out.println("ERROR getting UTC offset");            
        }
        return( offset );
    }
    
    private String doubleToString( double number, int maxLength ) {
        String strTemp = Double.toString( number );
        if( strTemp.length() > maxLength )
            strTemp = strTemp.substring( 0, maxLength );
        return( strTemp );
    }

    public void showDisabled() {
        txtSatName.setText( "Satellite Tracking Disabled" );
        txtRangeKm.setText( "" );
        txtAzimuth.setText( "" );
        txtElevation.setText( "" );        
        lblApproaching.setBackground( java.awt.Color.gray );
        lblSignalAcquisition.setBackground( java.awt.Color.gray );
        txtDoppler146.setText( "" );
        txtDoppler435.setText( "" );
        txtAOS.setText( "" );
        txtLOS.setText( "" );
        txtLatitude.setText( "" );
        txtLongitude.setText( "" );        
        txtAltitudeKm.setText( "" );
        txtVelocityKmH.setText( "" );
        txtFootprintKm.setText( "" );
        txtApogee.setText( "" );
        txtPerigee.setText( "" );        
        //txts3.setText( "" );
        //txtc3.setText( "" );
        //txtr3.setText( "" );
        //txtm1.setText( "" );
        //txtm5.setText( "" );
        //txte.setText( "" );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField txtSatName;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JTextField txtGroundRefLat;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JTextField txtGroundRefLong;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JTextField txtUTCOffset;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtRangeKm;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField txtAzimuth;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtElevation;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JTextField txtLatitude;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JTextField txtLongitude;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txtAltitudeKm;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField txtVelocityKmH;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtFootprintKm;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField txtApogee;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtPerigee;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JCheckBox chkEnableAntennaRotator;
    private javax.swing.JTextField txtAntennaRotatorFeedback;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JTextField txtDoppler146;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JTextField txtDoppler435;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JCheckBox chkDopplerCompensation;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JSlider slidDopplerTrim;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lblApproaching;
    private javax.swing.JLabel lblSignalAcquisition;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JTextField txtAOS;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JTextField txtLOS;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton btnPassPredict;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtPassPredict;
    // End of variables declaration//GEN-END:variables

}
