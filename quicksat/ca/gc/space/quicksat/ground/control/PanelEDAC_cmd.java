/*
 * panelEDAC_cmd.java
 *
 * Created on July 25, 2001, 5:10 PM
 */

package ca.gc.space.quicksat.ground.control;

import javax.swing.*;
import ca.gc.space.quicksat.ground.client.*;
import ca.gc.space.quicksat.ground.satellite.*;
import ca.gc.space.quicksat.ground.control.*;
import ca.gc.space.quicksat.ground.util.*;

/**
 *
 * @author  jfcusson
 */
public class PanelEDAC_cmd extends javax.swing.JPanel {
ServerLink  srvLnk               = null;
Satellite   sat                  = null;
Log         log                  = null;
private final String LED_OFF="/ca/gc/space/quicksat/ground/images/led_off.gif";
private final String LED_GREEN_ON="/ca/gc/space/quicksat/ground/images/led_green_on.gif";
private final String LED_RED_ON="/ca/gc/space/quicksat/ground/images/led_red_on.gif";
private final String LED_WHITE="/ca/gc/space/quicksat/ground/images/led_white.gif";

    /** Creates new form panelEDAC_cmd */
    public PanelEDAC_cmd( Log log ) {
        initComponents();
        this.log = log;                
        if( this.log == null ) this.log = new Log();
    }
    
    /*========================================================================*/    
    /** Set the object that is in charge of managing the link with the ground
     *  station server.
     *  @param srvLnk ServerLink used to communicate with the server.     */
    /*========================================================================*/
    public void setServerLink( ServerLink srvLnk ) {
    /*========================================================================*/    
        this.srvLnk = srvLnk;
    }
    
    /*========================================================================*/
    /** Set the object representing the satellite that we want to communicate
     *  with, and understanding the format of the commands.
     *  @param sat Satellite object representing our satellite.               */
    /*========================================================================*/
    public void setSatellite( Satellite sat ) {
    /*========================================================================*/    
        this.sat = sat;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
            jPanel15 = new javax.swing.JPanel();
            jPanel207 = new javax.swing.JPanel();
            jLabel116 = new javax.swing.JLabel();
            txtEDACWriteSegment = new javax.swing.JTextField();
            jLabel119 = new javax.swing.JLabel();
            txtEDACWriteOffset = new javax.swing.JTextField();
            jLabel120 = new javax.swing.JLabel();
            txtEDACWriteValue = new javax.swing.JTextField();
            btnEDACWrite = new javax.swing.JButton();
            jPanel239 = new javax.swing.JPanel();
            lblPeekMemSeg = new javax.swing.JLabel();
            txtPeekMemSeg = new javax.swing.JTextField();
            lblPeekMemOff = new javax.swing.JLabel();
            txtPeekMemOff = new javax.swing.JTextField();
            lblPeekMemOffTo = new javax.swing.JLabel();
            txtPeekMemOffTo = new javax.swing.JTextField();
            btnPeekMem = new javax.swing.JButton();
            
            setLayout(new java.awt.BorderLayout());
            
            jPanel207.setBorder(new javax.swing.border.TitledBorder("Write to Memory Location"));
            jLabel116.setText("Address (segment:offset, hex 4 digits each):");
            jPanel207.add(jLabel116);
            
            txtEDACWriteSegment.setPreferredSize(new java.awt.Dimension(55, 20));
            jPanel207.add(txtEDACWriteSegment);
            
            jLabel119.setText(":");
            jPanel207.add(jLabel119);
            
            txtEDACWriteOffset.setPreferredSize(new java.awt.Dimension(55, 20));
            jPanel207.add(txtEDACWriteOffset);
            
            jLabel120.setText("Value (hex 2 digits)::");
            jPanel207.add(jLabel120);
            
            txtEDACWriteValue.setPreferredSize(new java.awt.Dimension(55, 20));
            jPanel207.add(txtEDACWriteValue);
            
            btnEDACWrite.setText("Write");
            btnEDACWrite.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnEDACWriteActionPerformed(evt);
                }
            });
            
            jPanel207.add(btnEDACWrite);
            
            jPanel15.add(jPanel207);
          
          jPanel239.setBorder(new javax.swing.border.TitledBorder("Read Memory Locations"));
            lblPeekMemSeg.setText("Segment:");
            lblPeekMemSeg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jPanel239.add(lblPeekMemSeg);
            
            txtPeekMemSeg.setPreferredSize(new java.awt.Dimension(50, 20));
            txtPeekMemSeg.setMaximumSize(new java.awt.Dimension(50, 20));
            txtPeekMemSeg.setMinimumSize(new java.awt.Dimension(50, 20));
            jPanel239.add(txtPeekMemSeg);
            
            lblPeekMemOff.setText("Starting Offset:");
            lblPeekMemOff.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jPanel239.add(lblPeekMemOff);
            
            txtPeekMemOff.setPreferredSize(new java.awt.Dimension(50, 20));
            txtPeekMemOff.setMaximumSize(new java.awt.Dimension(50, 20));
            txtPeekMemOff.setMinimumSize(new java.awt.Dimension(50, 20));
            jPanel239.add(txtPeekMemOff);
            
            lblPeekMemOffTo.setText("To:");
            lblPeekMemOffTo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jPanel239.add(lblPeekMemOffTo);
            
            txtPeekMemOffTo.setPreferredSize(new java.awt.Dimension(50, 20));
            txtPeekMemOffTo.setMaximumSize(new java.awt.Dimension(50, 20));
            txtPeekMemOffTo.setMinimumSize(new java.awt.Dimension(50, 20));
            jPanel239.add(txtPeekMemOffTo);
            
            btnPeekMem.setText("Peek Memory");
            btnPeekMem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnPeekMemActionPerformed(evt);
                }
            });
            
            jPanel239.add(btnPeekMem);
            
            jPanel15.add(jPanel239);
          
          add(jPanel15, java.awt.BorderLayout.CENTER);
        
    }//GEN-END:initComponents

    private void btnEDACWriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEDACWriteActionPerformed

        SatControl ctrl = sat.getControl();
        if( (ctrl==null) || (srvLnk==null) ) return;
        srvLnk.sendPacketToSpacecraft(
                            ctrl.messageToWriteMemory(
                                            txtEDACWriteSegment.getText(), 
                                            txtEDACWriteOffset.getText(), 
                                            txtEDACWriteValue.getText() ) );
        
        //phtLink.sendPacket( PHT.dataPacket( PHT.cmdEDAC_Write,   
        //                                    txtEDACWriteSegment.getText(), 
        //                                    txtEDACWriteOffset.getText(), 
        //                                    txtEDACWriteValue.getText()) );
        
    }//GEN-LAST:event_btnEDACWriteActionPerformed

    private void btnPeekMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPeekMemActionPerformed

      SatControl ctrl = sat.getControl();
      if( (ctrl==null) || (srvLnk==null) ) return;
        
      String strOffset = txtPeekMemOff.getText().trim();
      int dOffset = Integer.parseInt( strOffset, 16 );
      int dOffsetTo = Integer.parseInt( txtPeekMemOffTo.getText().trim(), 16 );
      String strSegment = txtPeekMemSeg.getText().trim();
      
      /*---------------------------------------------------------*/
      /* NOTE: THIS IS NOT GOOD! We should start this into a new */
      /* thread because it takes a very long time to complete    */
      /*---------------------------------------------------------*/
      while( true ) {
        
        /*-------------------------------------*/
        /* Prepare the frame to peek at memory */
        /*-------------------------------------*/
        srvLnk.sendPacketToSpacecraft(
                       ctrl.messageToReadMemory( strSegment, strOffset ) );          
        //phtLink.sendPacket( PHT.dataPacket(PHT.cmdEDAC_Read, strSegment, strOffset) );
          
        /*-----------------------------------------------*/
        /* Increment dOffset by 16 to get the next batch */
        /*-----------------------------------------------*/                    
        dOffset += 16;
        if( dOffset > dOffsetTo ) break;
          
        if( dOffset > 65535 ) break;
          
        strOffset = Integer.toString( dOffset, 16 );
        txtPeekMemOff.setText( strOffset );
      }
    }//GEN-LAST:event_btnPeekMemActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel207;
    private javax.swing.JLabel jLabel116;
    private javax.swing.JTextField txtEDACWriteSegment;
    private javax.swing.JLabel jLabel119;
    private javax.swing.JTextField txtEDACWriteOffset;
    private javax.swing.JLabel jLabel120;
    private javax.swing.JTextField txtEDACWriteValue;
    private javax.swing.JButton btnEDACWrite;
    private javax.swing.JPanel jPanel239;
    private javax.swing.JLabel lblPeekMemSeg;
    private javax.swing.JTextField txtPeekMemSeg;
    private javax.swing.JLabel lblPeekMemOff;
    private javax.swing.JTextField txtPeekMemOff;
    private javax.swing.JLabel lblPeekMemOffTo;
    private javax.swing.JTextField txtPeekMemOffTo;
    private javax.swing.JButton btnPeekMem;
    // End of variables declaration//GEN-END:variables
    /*------------------------------------------------------------------------*/
    /** Change the appearance of the button so that user knows that the
     *  function associated with this button is not known, but will be as soon
     *  as we receive telemetry information.
     *  @param button The swing button.                                       */
    /*------------------------------------------------------------------------*/
    private void showButtonInactive( JButton button ) {
    /*------------------------------------------------------------------------*/
     button.setIcon(
       new javax.swing.ImageIcon(
        getClass().getResource(LED_OFF)));
    }
    
    /*------------------------------------------------------------------------*/
    /** Change the appearance of the button so that user knows that the
     *  function associated with this button is "active" or "on".
     *  @param button The swing button.                                       */
    /*------------------------------------------------------------------------*/
    private void showButtonActiveON( JButton button ) {
    /*------------------------------------------------------------------------*/
     button.setIcon(
       new javax.swing.ImageIcon(
        getClass().getResource(LED_GREEN_ON)));
    }
    
    /*------------------------------------------------------------------------*/
    /** Change the appearance of the button so that user knows that the
     *  function associated with this button is "inactive" or "off".
     *  @param button The swing button.                                       */
    /*------------------------------------------------------------------------*/
    private void showButtonActiveOFF( JButton button ) {
    /*------------------------------------------------------------------------*/
     button.setIcon(
       new javax.swing.ImageIcon(
        getClass().getResource(LED_RED_ON)));
    }
    
    /*------------------------------------------------------------------------*/
    /** Change the appearance of the button so that user knows that the
     *  state of the function associated with this button is unknown.
     *  @param button The swing button.                                       */
    /*------------------------------------------------------------------------*/
    private void showButtonNeutral( JButton button ) {
    /*------------------------------------------------------------------------*/
     button.setIcon(
       new javax.swing.ImageIcon(
        getClass().getResource(LED_WHITE)));
    }
}
